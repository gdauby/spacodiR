usable.species.tmp <- intersect(rownames(phy), intersect(rownames(sp.traits), usable.species))
phy <- reorderspacodiobj(phy, usable.species.tmp)
usable.species <- usable.species.tmp[match(rownames(phy), usable.species.tmp)]
if (prune) {
sp.plot <- prune.sp(reorderspacodiobj(sp.plot, usable.species), verbose =
verbose)
} else {
sp.plot <- reorderspacodiobj(sp.plot, usable.species)
}
r.out <- list(
sp.plot = sp.plot,
sp.tree = reorderspacodiobj(phy, usable.species),
sp.traits = reorderspacodiobj(sp.traits, usable.species)
)
}
}
if (!missing(sp.traits) & !missing(phy)) {
if (class(phy) == "phylo") {
usable.species.tmp <- intersect(phy$tip.label, intersect(rownames(sp.traits), usable.species))
phy <- reorderspacodiobj(phy, usable.species.tmp)
usable.species <- usable.species.tmp[match(phy$tip.label, usable.species.tmp)]
if (prune) {
sp.plot <- prune.sp(reorderspacodiobj(sp.plot, usable.species), verbose =
verbose)
} else {
sp.plot <- reorderspacodiobj(sp.plot, usable.species)
}
r.out <- list(
sp.plot = sp.plot,
sp.tree = reorderspacodiobj(phy, usable.species),
sp.traits = reorderspacodiobj(sp.traits, usable.species)
)
} else {
if (check.distmat(phy)) {
usable.species.tmp <- intersect(rownames(phy), intersect(rownames(sp.traits), usable.species))
phy <- reorderspacodiobj(phy, usable.species.tmp)
usable.species <- usable.species.tmp[match(rownames(phy), usable.species.tmp)]
if (prune) {
sp.plot <- prune.sp(reorderspacodiobj(sp.plot, usable.species), verbose =
verbose)
} else {
sp.plot <- reorderspacodiobj(sp.plot, usable.species)
}
r.out <- list(
sp.plot = sp.plot,
sp.tree = reorderspacodiobj(phy, usable.species),
sp.traits = reorderspacodiobj(sp.traits, usable.species)
)
}
}
}
match.spacodi.data(sp.plot = spl, phy = phy, sp.traits = trt[1:6,])
sp.plot = spl
phy = phy
sp.traits = trt[1:6,]
# major error checking
sp.plot <- as.matrix(sp.plot)
if (is.null(row.names(sp.plot)))
stop("Check that sp.plot has row names as species.")
if (is.null(colnames(sp.plot))) {
warning("sp.plot does not appear to have plots as column names.")
names(sp.plot) <- paste("plot", 1:ncol(sp.plot), sep = "")
}
if (!missing(phy)) {
if (class(phy) == "phylo") {
if (length(unique(phy$tip.label)) != length(phy$tip.label))
stop("Redundant taxa were found in tree.")
if (!is.null(phy$node.label))
phy$node.label <- NULL
}
}
if (length(unique(names(sp.plot))) != length(names(sp.plot)))
stop("Redundant plots were found in sp.plot.")
# check poor values in sp.plot
if (any(!is.finite(sp.plot))) {
poor <- which(!is.finite(sp.plot))
poor %% nrow(sp.plot) -> poor.rows
ceiling(poor / nrow(sp.plot)) -> poor.cols
poor.data = as.list(paste(rownames(sp.plot)[poor.rows], colnames(sp.plot)[poor.cols]))
stop(
"Poor data values found in supplied sp.plot (NA, NaN, or Inf):\n\n\t",
toString(poor.data),
"\n"
)
}
if (prune)
sp.plot <- prune.sp(sp.plot, verbose = verbose)
# match ordering and size of all data objects
usable.species <- rownames(sp.plot)
# phy only
if (missing(sp.traits) & !missing(phy)) {
if (class(phy) == "phylo") {
usable.species.tmp <- intersect(phy$tip.label, usable.species)
phy <- reorderspacodiobj(phy, usable.species.tmp)
usable.species <- usable.species.tmp[match(phy$tip.label, usable.species.tmp)]
if (prune)
sp.plot <- prune.sp(reorderspacodiobj(sp.plot, usable.species), verbose =
verbose)
else
sp.plot <- reorderspacodiobj(sp.plot, usable.species)
r.out <- list(sp.plot = sp.plot, sp.tree = phy)
} else if (check.distmat(phy)) {
usable.species.tmp <- intersect(rownames(phy), usable.species)
phy <- reorderspacodiobj(phy, usable.species.tmp)
usable.species <- usable.species.tmp[match(rownames(phy), usable.species.tmp)]
if (prune)
sp.plot <- prune.sp(reorderspacodiobj(sp.plot, usable.species), verbose =
verbose)
else
sp.plot <- reorderspacodiobj(sp.plot, usable.species)
r.out <- list(sp.plot = sp.plot, sp.tree = phy)
}
}
# sp.traits only
if (!missing(sp.traits) & missing(phy)) {
usable.species <- intersect(usable.species, rownames(sp.traits))
if (prune)
sp.plot <- prune.sp(reorderspacodiobj(sp.plot, usable.species), verbose =
verbose)
else
sp.plot <- reorderspacodiobj(sp.plot, usable.species)
r.out <- list(sp.plot = sp.plot,
sp.traits = reorderspacodiobj(sp.traits, usable.species))
}
# both sp.traits and phy
if (!missing(sp.traits) & !missing(phy)) {
if (class(phy) == "phylo") {
usable.species.tmp <- intersect(phy$tip.label, intersect(rownames(sp.traits), usable.species))
phy <- reorderspacodiobj(phy, usable.species.tmp)
usable.species <- usable.species.tmp[match(phy$tip.label, usable.species.tmp)]
if (prune) {
sp.plot <- prune.sp(reorderspacodiobj(sp.plot, usable.species), verbose =
verbose)
} else {
sp.plot <- reorderspacodiobj(sp.plot, usable.species)
}
r.out <- list(
sp.plot = sp.plot,
sp.tree = reorderspacodiobj(phy, usable.species),
sp.traits = reorderspacodiobj(sp.traits, usable.species)
)
} else {
if (check.distmat(phy)) {
usable.species.tmp <- intersect(rownames(phy), intersect(rownames(sp.traits), usable.species))
phy <- reorderspacodiobj(phy, usable.species.tmp)
usable.species <- usable.species.tmp[match(rownames(phy), usable.species.tmp)]
if (prune) {
sp.plot <- prune.sp(reorderspacodiobj(sp.plot, usable.species), verbose =
verbose)
} else {
sp.plot <- reorderspacodiobj(sp.plot, usable.species)
}
r.out <- list(
sp.plot = sp.plot,
sp.tree = reorderspacodiobj(phy, usable.species),
sp.traits = reorderspacodiobj(sp.traits, usable.species)
)
}
}
}
!missing(sp.traits) & !missing(phy)
class(phy) == "phylo"
usable.species.tmp <- intersect(phy$tip.label, intersect(rownames(sp.traits), usable.species))
phy <- reorderspacodiobj(phy, usable.species.tmp)
usable.species <- usable.species.tmp[match(phy$tip.label, usable.species.tmp)]
if (prune) {
sp.plot <- prune.sp(reorderspacodiobj(sp.plot, usable.species), verbose =
verbose)
} else {
sp.plot <- reorderspacodiobj(sp.plot, usable.species)
}
r.out <- list(
sp.plot = sp.plot,
sp.tree = reorderspacodiobj(phy, usable.species),
sp.traits = reorderspacodiobj(sp.traits, usable.species)
)
usable.species.tmp <- intersect(phy$tip.label, intersect(rownames(sp.traits), usable.species))
phy <- reorderspacodiobj(phy, usable.species.tmp)
usable.species <- usable.species.tmp[match(phy$tip.label, usable.species.tmp)]
prune
sp.plot <- prune.sp(reorderspacodiobj(sp.plot, usable.species), verbose =
verbose)
usable.species.tmp <- intersect(phy$tip.label, intersect(rownames(sp.traits), usable.species))
phy <- reorderspacodiobj(phy, usable.species.tmp)
usable.species <- usable.species.tmp[match(phy$tip.label, usable.species.tmp)]
if (prune) {
sp.plot <- prune.sp(reorderspacodiobj(sp.plot, usable.species), verbose =
verbose)
} else {
sp.plot <- reorderspacodiobj(sp.plot, usable.species)
}
r.out <- list(
sp.plot = sp.plot,
sp.tree = reorderspacodiobj(phy, usable.species),
sp.traits = reorderspacodiobj(sp.traits, usable.species)
)
usable.species.tmp <- intersect(phy$tip.label, intersect(rownames(sp.traits), usable.species))
phy <- reorderspacodiobj(phy, usable.species.tmp)
usable.species <- usable.species.tmp[match(phy$tip.label, usable.species.tmp)]
if (prune) {
sp.plot <- prune.sp(reorderspacodiobj(sp.plot, usable.species), verbose =
verbose)
} else {
sp.plot <- reorderspacodiobj(sp.plot, usable.species)
}
r.out <- list(
sp.plot = sp.plot,
sp.tree = reorderspacodiobj(phy, usable.species),
sp.traits = reorderspacodiobj(sp.traits, usable.species)
)
sp.plot = spl
phy = phy
sp.plot <- as.matrix(sp.plot)
if (is.null(row.names(sp.plot)))
stop("Check that sp.plot has row names as species.")
if (is.null(colnames(sp.plot))) {
warning("sp.plot does not appear to have plots as column names.")
names(sp.plot) <- paste("plot", 1:ncol(sp.plot), sep = "")
}
if (!missing(phy)) {
if (class(phy) == "phylo") {
if (length(unique(phy$tip.label)) != length(phy$tip.label))
stop("Redundant taxa were found in tree.")
if (!is.null(phy$node.label))
phy$node.label <- NULL
}
}
if (length(unique(names(sp.plot))) != length(names(sp.plot)))
stop("Redundant plots were found in sp.plot.")
# check poor values in sp.plot
if (any(!is.finite(sp.plot))) {
poor <- which(!is.finite(sp.plot))
poor %% nrow(sp.plot) -> poor.rows
ceiling(poor / nrow(sp.plot)) -> poor.cols
poor.data = as.list(paste(rownames(sp.plot)[poor.rows], colnames(sp.plot)[poor.cols]))
stop(
"Poor data values found in supplied sp.plot (NA, NaN, or Inf):\n\n\t",
toString(poor.data),
"\n"
)
}
if (prune)
sp.plot <- prune.sp(sp.plot, verbose = verbose)
# match ordering and size of all data objects
usable.species <- rownames(sp.plot)
usable.species.tmp <- intersect(phy$tip.label, usable.species)
phy <- reorderspacodiobj(phy, usable.species.tmp)
usable.species <- usable.species.tmp[match(phy$tip.label, usable.species.tmp)]
prune
sp.plot <- prune.sp(reorderspacodiobj(sp.plot, usable.species), verbose =
verbose)
reorderspacodiobj(sp.plot, usable.species)
obj = sp.plot
names = usable.species
sp.plot
reorderspacodiobj(obj = sp.plot, names = usable.species)
class(obj)
grepl("phylo", class(obj))
any(grepl("phylo", class(obj)))
devtools::load_all()
match.spacodi.data(sp.plot = spl, phy = phy, sp.traits = trt[1:6,])
devtools::load_all()
match.spacodi.data(sp.plot = spl, phy = phy, sp.traits = trt[1:6,])
?reorderspacodiobj
usable.species.tmp
phy
reorderspacodiobj(phy, usable.species.tmp)
?write.spacodi.data
write.spacodi.data(sp.plot=spl, outfile="spacodi.formatted.txt")
?as.phylocom
?as.picante
?as.spacodi
?resamp.1a
?resamp.1s
?resamp.2s
?resamp.2x
?resamp.3i
?resamp.3t
?resamp.3x
?resamp.phy
?phy.dotplot
?spacodi.treeplot
?spacodi.permutplot
?add.transparency
?textxy
?spacodi.calc
devtools::load_all()
spacodi.calc(sp.plot = spl, phy = phy)
spacodi.calc(sp.plot = spl, phy = phy, pairwise=TRUE)
spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=TRUE)
spacodi.calc(sp.plot = spl)
spacodi.calc(sp.plot = spl[1:15,], phy = phy, prune=TRUE)
match.spacodi.data(sp.plot=spl[1:15,],phy=phy) -> prn.data
spacodi.calc(sp.plot=prn.data$sp.plot, phy=prn.data$sp.tree)
prn.data$sp.plot
prn.data$sp.tree
?spacodi.all.nodes
?spacodi.exp.nodes
?spacodi.by.nodes
devtools::document()
rm(list = c(".Random.seed"))
devtools::document()
?spacodi.exp.nodes
?resamp.test
devtools::load_all()
?resamp.test
?spacodi.exp.nodes
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
data(sp.example)
attach(sp.example)
spacodi.calc(sp.plot = spl, phy = phy)
sp.plot = spl
phy = phy
sp.traits = NULL
all.together = TRUE
prune = TRUE
pairwise = FALSE
if (!missing(phy) &&
!missing(sp.traits))
stop("Please supply either a phylogeny or a trait matrix, but not both.")
phy
spl
phy
sp.traits
sp.traits
missing(sp.traits)
!missing(sp.traits)
# determine type of abundance
stripped = unname(unlist(c(sp.plot)))
if (all(!is.na(match(stripped, c(0, 1))))) {
abundt = 0		# presence|absence
} else if (all(!is.na(match(range(stripped), c(0, 1)))) &&
length(unique(stripped)) > 2) {
abundt = 1		# relative abundance
} else {
abundt = 2		# abundance (n.individuals)
}
# iter is 1 unless more than a single trait is being used for separate analyses
iter <- 1
traits.tmp <- distmat <- NULL
# INTERPRET whether to compute trait diversity or phylogenetic diversity & prepare data
if (!missing(phy)) {
# distmat is phylogenetic: Pst
sp.data <- match.spacodi.data(sp.plot = sp.plot,
phy = phy,
prune = prune,
...)
sp.plot <- sp.data$sp.plot
phy <- sp.data$sp.tree
if (check.distmat(phy))
distmat <- phy
else
distmat <- cophen(phy)
} else if (missing(sp.traits) & missing(phy)) {
# distmat is null: Ist
distmat <- matrix(1, ncol = nrow(sp.plot), nrow = nrow(sp.plot))
} else if (!missing(sp.traits)) {
# distmat is trait-based: Tst
if (class(sp.traits) == "dist")
sp.traits <- as.matrix(sp.traits)
if (ncol(sp.traits) == 1)
all.together <- TRUE
if (all(is.null(names(sp.traits))))
names(sp.traits) <- paste("trt", seq(1:ncol(sp.traits)), sep = "")
if (all.together == TRUE | check.distmat(sp.traits)) {
sp.data <- match.spacodi.data(sp.plot = sp.plot,
sp.traits = sp.traits,
prune = prune,
...)
sp.plot <- sp.data$sp.plot
sp.traits <- sp.data$sp.traits
if (check.distmat(sp.traits))
distmat <- sp.traits
else
distmat <- as.matrix(dist(sp.traits))
} else {
iter <- ncol(sp.traits)
traits.tmp <- lapply(1:ncol(sp.traits), function(x) {
trait.tt <- data.frame(sp.traits[, x])
row.names(trait.tt) <- row.names(sp.traits)
sp.data <-
match.spacodi.data(sp.plot = sp.plot,
sp.traits = trait.tt,
prune = prune,
...)
distmat <- as.matrix(dist(sp.data$sp.traits))
return(list(distmat = distmat, sp.plot = sp.data$sp.plot))
})
}
} else if (is.null(distmat)) {
stop("Cannot decipher input object(s).")
}
sp.data <- match.spacodi.data(sp.plot = sp.plot,
phy = phy,
prune = prune)
sp.plot <- sp.data$sp.plot
phy <- sp.data$sp.tree
if (check.distmat(phy))
distmat <- phy
else
distmat <- cophen(phy)
check.distmat(phy)
distmat <- cophen(phy)
?Ntip
??Ntip
devtools::load_all()
spacodi.calc(sp.plot = spl, phy = phy)
library(spacodiR)
spacodi.calc(sp.plot = spl, phy = phy)
devtools::load_all()
spacodi.calc(sp.plot = spl, phy = phy)
n <- ape::Ntip(phy)
n
out <- .Call(
"cophen",
tree = list(
ROOT = as.integer(n + 1),
MAXNODE = as.integer(max(phy$edge[, 1])),
ENDOFCLADE = as.integer(dim(phy$edge)[1]),
ANC = as.integer(phy$edge[, 1]),
DES = as.integer(phy$edge[, 2]),
EDGES = as.double(c(phy$edge.length, 0)),
COPHEN = as.double(array(matrix(0, n, n)))
),
PACKAGE = "spacodiR"
)
out <- .Call(
"cophen",
tree = list(
ROOT = as.integer(n + 1),
MAXNODE = as.integer(max(phy$edge[, 1])),
ENDOFCLADE = as.integer(dim(phy$edge)[1]),
ANC = as.integer(phy$edge[, 1]),
DES = as.integer(phy$edge[, 2]),
EDGES = as.double(c(phy$edge.length, 0)),
COPHEN = as.double(array(matrix(0, n, n)))
),
PACKAGE = "spacodiR"
)
usethis::use_rcpp()
devtools::load_all()
rm(list = c(".Random.seed"))
devtools::load_all()
spacodi.calc(sp.plot = spl, phy = phy)
devtools::load_all()
spacodi.calc(sp.plot = spl, phy = phy)
usethis::use_rcpp()
devtools::document()
rm(list = c(".Random.seed"))
devtools::document()
devtools::load_all()
spacodi.calc(sp.plot = spl, phy = phy)
spacodi.calc(sp.plot = spl, phy = phy, pairwise=TRUE)
spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=TRUE)
spacodi.calc(sp.plot = spl, sp.traits = trt, all.together=FALSE)
spacodi.calc(sp.plot = spl)
spacodi.calc(sp.plot = spl[1:15,], phy = phy, prune=TRUE)
sp.plot = spl[1:15,]
phy = phy
prune=TRUE
# determine type of abundance
stripped = unname(unlist(c(sp.plot)))
if (all(!is.na(match(stripped, c(0, 1))))) {
abundt = 0		# presence|absence
} else if (all(!is.na(match(range(stripped), c(0, 1)))) &&
length(unique(stripped)) > 2) {
abundt = 1		# relative abundance
} else {
abundt = 2		# abundance (n.individuals)
}
# iter is 1 unless more than a single trait is being used for separate analyses
iter <- 1
traits.tmp <- distmat <- NULL
sp.data <- match.spacodi.data(sp.plot = sp.plot,
phy = phy,
prune = prune)
devtools::load_all()
spacodi.calc(sp.plot = spl[1:15,], phy = phy, prune=TRUE)
spacodi.calc(sp.plot=prn.data$sp.plot, phy=prn.data$sp.tree)
match.spacodi.data(sp.plot=spl[1:15,],phy=phy) -> prn.data
spacodi.calc(sp.plot=prn.data$sp.plot, phy=prn.data$sp.tree)
prn.data$sp.plot
data(sp.example)
as.picante(data=d.phylocom)->d.picante
spl->d.spacodi
spl->d.spacodi
d.spacodi
as.phylocom(data=spl, picante=FALSE)->d.phylocom
as.picante(data=d.phylocom)->d.picante
d.picante
as.spacodi(data=d.picante)
?write.table
?withinrange
devtools::document()
rm(list = c(".Random.seed"))
devtools::document()
data(sp.example)
sp.example
?sp.example
data("debug")
debug
devtools::document()
devtools::document()
rm(list = c(".Random.seed"))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
